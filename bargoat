#!/usr/bin/make -rRf
# Usage:
# bargoat correct reads1=reads1.fq reads2=reads2.fq
# bargoat simulate
#

# Figuring out where we are
mkfile_path := $(abspath $(lastword $(MAKEFILE_LIST)))
current_dir :=  $(patsubst %/,%,$(dir $(mkfile_path)))/
clustering_path?=$(current_dir)clustering/
simulating_path?=$(current_dir)simulating/

SHELL=/bin/bash -o pipefail
cc?=g++
python3?= PYTHONHASHSEED=0 python3
cc_files?= $(clustering_path)*.cc $(clustering_path)*.h
cc_flags?=
cc_args?= $(cc_flags) -O3 -std=c++11
art_illumina?=art_illumina



# Common arguments
random_seed?=42

# Simulation common
simulation_datasets_path?=$(simulating_path)datasets/
bed?=
bed_flag=--bed $(references_path)$(bed).bed
bed_prefix=_bed$(bed)
ifeq ($(bed),)
	bed_flag=
	bed_prefix=
endif
reference_name?=e_coli

simulation_prefix?=$(simulation_datasets_path)$(reference_name)$(bed_prefix)_$(random_seed)

references_path?=$(simulating_path)genomes/

## Generating barcodes
num_barcodes?=100
barcode_length?=10
barcodes_params?=_l$(barcode_length)_n$(num_barcodes)
simulated_barcodes?=$(simulation_prefix)$(barcodes_params)_barcodes.txt

## Generating molecules
molecule_size_mu?=250
molecule_size_dev?=25
num_molecules?=500
read_length?=150
reference?=$(references_path)$(reference_name).fa
molecules_params?=_mu$(molecule_size_mu)_dev$(molecule_size_dev)_m$(num_molecules)
simulated_molecules?=$(simulation_prefix)$(molecules_params)_molecules.fa


## Barcoding molecules
simulated_barcoded_molecules?=$(simulation_prefix)$(barcodes_params)$(molecules_params)_barcoded_molecules.fa

## PCR duplication
pcr_cycles?=7
pcr_duplication_rate?=0.8
pcr_error_rate?=0.00003
pcr_params?=_c$(pcr_cycles)_r$(pcr_duplication_rate)_e$(pcr_error_rate)
amplified_barcoded_molecules?=$(simulation_prefix)$(barcodes_params)$(molecules_params)$(pcr_params)_amplified_barcoded_molecules.fa

## Generating reads
simulated_reads?=$(simulation_prefix)$(barcodes_params)$(molecules_params)$(pcr_params)_reads
sequencing_machine?=HSXt
simulated_reads_log?=$(simulated_reads)_art_illumina.log

# Clustering arguments
input_reads_prefix?=$(simulated_reads)
forward_reads?=$(input_reads_prefix)_1.fq
reverse_reads?=$(input_reads_prefix)_2.fq
minimizers_num?=3
kmer_size?=8
barcode_error_tolerance?=2
minimizers_threshold?=1
silent?=--silent

clustering_params?=_l$(barcode_length)_m$(minimizers_num)_k$(kmer_size)_e$(barcode_error_tolerance)_t$(minimizers_threshold)
output_prefix?=$(input_reads_prefix)$(clustering_params)

# Rand Index Accuracy arguments
cluster_file?=$(output_prefix).cluster
input_amplified_molecules?=$(amplified_barcoded_molecules)
output_accuracy_results?=$(output_prefix).accuracy
# number


.DELETE_ON_ERROR:
.SECONDARY:
.PHONY: help correct simulate simulate_clean

help:
	@echo 'bargoat: Clustering tagged amplicon sequencing reads by barcode and sequence similarity'
	@echo 'Usage: ./bargoat [COMMAND]... [PARAMETER=VALUE]...'
	@echo 'Example: ./bargoat simulate'
	@echo '			./bargoat cluster input_reads_prefix=simulating/simulated_reads_'
	@echo 'Checking the possible list of commands down here, and the parameter list up here.'

$(simulated_barcodes):
	$(python3) $(simulating_path)generate_barcodes.py \
		--num-of-barcodes $(num_barcodes) \
		--len-of-one-end-barcode $(barcode_length) \
		--random-seed $(random_seed) \
		--output-barcodes $(simulated_barcodes)

$(simulated_molecules):
	$(python3) $(simulating_path)generate_molecules.py \
		--reference $(reference) \
		--number-of-molecules $(num_molecules) \
		--molecule-size-mean $(molecule_size_mu) \
		--molecule-size-standard-dev $(molecule_size_dev) \
		--min-molecule-size $(read_length) \
		--random-seed $(random_seed) \
		--output-molecules $(simulated_molecules) \
		$(bed_flag)

$(simulated_barcoded_molecules): $(simulated_barcodes) $(simulated_molecules)
	$(python3) $(simulating_path)attach_barcodes_to_molecules.py \
		--input-barcodes $(simulated_barcodes) \
		--input-molecules $(simulated_molecules) \
		--random-seed $(random_seed) \
		--output-barcoded-molecules $(simulated_barcoded_molecules)

$(amplified_barcoded_molecules): $(simulated_barcoded_molecules)
	$(python3) $(simulating_path)pcr_duplication.py \
		--molecules $(simulated_barcoded_molecules) \
		--number-of-cycles $(pcr_cycles) \
		--duplication-rate-per-cycle $(pcr_duplication_rate) \
		--error-rate $(pcr_error_rate) \
		--random-seed $(random_seed) \
		--pcr-product $(amplified_barcoded_molecules)

simulate: $(amplified_barcoded_molecules)
	$(art_illumina) \
		--seqSys $(sequencing_machine) \
		--amplicon \
		--paired \
		--noALN \
		--in $(amplified_barcoded_molecules) \
		--len $(read_length) \
		--fcov 1 \
		--rndSeed $(random_seed) \
		--out $(simulated_reads)_ \
		> $(simulated_reads_log);

simulate_clean:
	rm -f $(simulation_datasets_path)*

$(clustering_path)bargoat.o: $(cc_files)
	$(cc) $(cc_files) $(cc_args) -o $(clustering_path)bargoat.o

cluster: $(clustering_path)bargoat.o $(forward_reads) $(reverse_reads)
	$(clustering_path)bargoat.o \
		--input-forward $(forward_reads) \
		--input-reverse $(reverse_reads) \
		--output-prefix $(output_prefix) \
		--barcode-length $(barcode_length) \
		--minimizer-count $(minimizers_num) \
		--kmer-size $(kmer_size) \
		--error-tolerance $(barcode_error_tolerance) \
		--minimizer-threshold $(minimizers_threshold) \
		$(silent)

accuracy: $(cluster_file)
	$(python3) $(simulating_path)rand_index.py \
		--input-cluster-file $(cluster_file) \
		--input-amplified-molecule $(input_amplified_molecules) \
		--output-accuracy-results $(output_accuracy_results)


clean:
	rm -f $(clustering_path)*.o
