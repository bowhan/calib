#!/usr/bin/make -rRf
# Usage:
# barcor-make correct reads1=reads1.fq reads2=reads2.fq
# barcor-make simulate
#

SHELL=/bin/bash -o pipefail
cc?=g++
python3?=python3
cc_args?= -O4 -std=c++11
art_illumina?=art_illumina

# Common arguments
random_seed?=42

# Duplex sequencing simulation
num_barcodes?=10000
num_molecules?=1000
molecule_size_mu?=250
molecule_size_dev?=25
read_length?=150
reference?=Data/e_coli.fa.gz
coverage?=20
simulated_barcodes?=Data/simulated_barcodes.txt
simulated_molecules?=Data/simulated_molecules.fa
simulated_barcoded_molecules?=Data/simulated_barcoded_molecules.fa
simulated_reads?=Data/simulated_reads
simulated_reads_log?=$(simulated_reads).log

# Correction arguments
input_reads_prefix?=$(simulated_reads)
forward_reads?=$(input_reads_prefix)_1.fq
reverse_reads?=$(input_reads_prefix)_2.fq

barcode_length?=10
minimizers_num?=3
kmer_size?=8

barcode_error_tolerance?=2
minimizers_threshold?=1
whole_to_sample_ratio?=1

output_prefix?=$(input_reads_prefix)_l$(barcode_length)_m$(minimizers_num)_k$(kmer_size)_e$(barcode_error_tolerance)_t$(minimizers_threshold)_q$(whole_to_sample_ratio)
barcode_mini_tsv_file?=$(output_prefix).tsv



tsv_output=$(firstword $(subst '1.fq', ,$(reads1)))_min.tsv


.DELETE_ON_ERROR:
.SECONDARY:
.PHONY: help correct simulate simulate_clean

help:
	@echo 'barcor: Correct duplex-sequencing runs by clustering on barcodes and sequences'
	@echo 'Usage: barcor-make [COMMAND]... [PARAMETER=VALUE]...'
	@echo 'Example: barcor-make correct reads1=reads1.fq reads2=reads2.fq'
	@echo '			barcor-make simulate '
	@echo 'At the moment, fastq files must end in 1.fq and 2.fq respectively'

$(simulated_barcodes):
	$(python3) Data/generate_barcodes.py \
		--num-of-barcodes $(num_barcodes) \
		--len-of-one-end-barcode $(barcode_length) \
		--random-seed $(random_seed) \
		--output-barcodes $(simulated_barcodes)

$(simulated_molecules):
	$(python3) Data/generate_molecules.py \
		--reference $(reference) \
		--number-of-molecules $(num_molecules) \
		--molecule-size-mean $(molecule_size_mu) \
		--molecule-size-standard-dev $(molecule_size_dev) \
		--min-molecule-size $(read_length) \
		--random-seed $(random_seed) \
		--output-molecules $(simulated_molecules)

$(simulated_barcoded_molecules): $(simulated_barcodes) $(simulated_molecules)
	$(python3) Data/attach_barcodes_to_molecules.py \
		--input-barcodes $(simulated_barcodes) \
		--input-molecules $(simulated_molecules) \
		--random-seed $(random_seed) \
		--output-barcoded-molecules $(simulated_barcoded_molecules)

simulate: $(simulated_barcoded_molecules)
	$(art_illumina) -ss HSXt -amp -p -na -i $(simulated_barcoded_molecules) -l $(read_length) -f $(coverage) -rs $(random_seed) -o $(simulated_reads)_ > $(simulated_reads_log); \

simulate_clean:
	rm $(simulated_barcodes); \
	rm $(simulated_molecules); \
	rm $(simulated_barcoded_molecules);


fastq_to_tsv.o: fastq_to_tsv.cc
	$(cc) fastq_to_tsv.cc -o fastq_to_tsv.o $(cc_args)

$(barcode_mini_tsv_file): fastq_to_tsv.o $(forward_reads) $(reverse_reads)
	./fastq_to_tsv.o $(forward_reads) $(reverse_reads) $(barcode_mini_tsv_file) $(barcode_length) $(kmer_size) $(minimizers_num)

correct: $(forward_reads) $(reverse_reads) $(barcode_mini_tsv_file)
	$(python3) barcode_clustering.py \
		--forward-reads $(forward_reads)\
		--reverse-reads $(reverse_reads)\
		--barcode-mini-tsv-file $(barcode_mini_tsv_file)\
		--barcode-error-tolerance $(barcode_error_tolerance)\
		--minimizers-threshold $(minimizers_threshold)\
		--whole-to-sample-ratio $(whole_to_sample_ratio)\
		--random-seed $(random_seed)\
		--output-prefix $(output_prefix)

clean:
	rm -f *.o


# $^ - Dependencies
# $< - First dependency
# $@ - Target
# $* - Stem in pattern rule ie. %
