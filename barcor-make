#!/usr/bin/make -rRf
# Usage:
# barcor-make correct reads1=reads1.fq reads2=reads2.fq
# barcor-make simulate
#
random_seed?=42

# Duplex sequencing simulation
num_barcodes?=10000
num_molecules?=1000
molecule_size_mu?=250
molecule_size_dev?=25
read_length?=150
reference?=Data/e_coli.fa.gz
coverage?=20
simulated_barcodes?=Data/simulated_barcodes.txt
simulated_molecules?=Data/simulated_molecules.fa
simulated_barcoded_molecules?=Data/simulated_barcoded_molecules.fa
simulated_reads?=Data/simulated_reads
simulated_reads_log?=$(simulated_reads).log

# Barcode correction
barcode_length?=10
error_tolerance?=4
minimizers_num?=3
kmer_size?=8
log_file?=log.out
minimizer_threshold?=1

tsv_output=$(firstword $(subst '1.fq', ,$(reads1)))_min.tsv

SHELL=/bin/bash -o pipefail
CC=g++

.DELETE_ON_ERROR:
.SECONDARY:
.PHONY: help correct simulate

help:
	@echo 'barcor: Correct duplex-sequencing runs by clustering on barcodes and sequences'
	@echo 'Usage: barcor-make [COMMAND]... [PARAMETER=VALUE]...'
	@echo 'Example: barcor-make correct reads1=reads1.fq reads2=reads2.fq'
	@echo '			barcor-make simulate '
	@echo 'At the moment, fastq files must end in 1.fq and 2.fq respectively'

barcodes:
	python3 Data/generate_barcodes.py \
		--num-of-barcodes $(num_barcodes) \
		--len-of-one-end-barcode $(barcode_length) \
		--random-seed $(random_seed) \
		--output-barcodes $(simulated_barcodes)

molecules:
	python3 Data/generate_molecules.py \
		--reference $(reference) \
		--number-of-molecules $(num_molecules) \
		--molecule-size-mean $(molecule_size_mu) \
		--molecule-size-standard-dev $(molecule_size_dev) \
		--min-molecule-size $(read_length) \
		--random-seed $(random_seed) \
		--output-molecules $(simulated_molecules)

barcoded_molecules: barcodes molecules
	python3 Data/attach_barcodes_to_molecules.py \
		--input-barcodes $(simulated_barcodes) \
		--input-molecules $(simulated_molecules) \
		--random-seed $(random_seed) \
		--output-barcoded-molecules $(simulated_barcoded_molecules)

simulate: barcoded_molecules
	art_illumina -ss HSXt -amp -p -na -i $(simulated_barcoded_molecules) -l $(read_length) -f $(coverage) -rs $(random_seed) -o $(simulated_reads)_ > $(simulated_reads_log); \

simulate_clean:
	rm $(simulated_barcodes); \
	rm $(simulated_molecules); \
	rm $(simulated_barcoded_molecules);


correct: $(tsv_output)
	python3 barcode_clustering.py -f $(reads1) -r $(reads2) -t $(tsv_output) -l $(barcode_length) -e $(error_tolerance) -m $(minimizers_num) -x $(minimizer_threshold) -k $(kmer_size) -o $(log_file)

fastq_to_tsv.o: fastq_to_tsv.cc
	$(CC) fastq_to_tsv.cc -o fastq_to_tsv.o -std=c++11

$(tsv_output): fastq_to_tsv.o
	./fastq_to_tsv.o $(reads1) $(reads2) $(tsv_output) $(barcode_length) $(kmer_size) $(minimizers_num)



# $^ - Dependencies
# $< - First dependency
# $@ - Target
# $* - Stem in pattern rule ie. %
