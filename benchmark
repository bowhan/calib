#!/usr/bin/make -rRf
my_mkfile_path := $(abspath $(lastword $(MAKEFILE_LIST)))
my_current_dir :=  $(patsubst %/,%,$(dir $(my_mkfile_path)))/
include $(my_current_dir)/Makefile
ECHO := echo -e
RAW_AWK := awk
AWK := $(RAW_AWK) -f
benchmark_aux_path = $(my_current_dir)aux
GNU_TIME?=$(benchmark_aux_path)/other_tools/time-1.9/time
GET_TIME := $(benchmark_aux_path)/get_time.awk
GET_MEM := $(benchmark_aux_path)/get_mem.awk
GET_ACCURACY := $(benchmark_aux_path)/get_accuracy.awk
CONVERT_CDHITEST := $(benchmark_aux_path)/convert_cdhitest_to_cluster.sh
CONVERT_STARCODE := $(benchmark_aux_path)/convert_starcode_to_cluster.sh
CONVERT_RAINBOW := $(benchmark_aux_path)/convert_rainbow_to_cluster.sh
CONVERT_DUNOVO := $(benchmark_aux_path)/convert_dunovo_to_cluster.sh

cdhitest?=$(benchmark_aux_path)/other_tools/cdhit/cd-hit-est
cdhitest_dist?=0.95
cdhitest_params=dist_$(cdhitest_dist).
cdhitest_output_prefix=$(input_reads_prefix)cdhitest.$(cdhitest_params)
cdhitest_output=$(cdhitest_output_prefix)out
cdhitest_cluster=$(cdhitest_output_prefix)cluster
cdhitest_accuracy=$(cdhitest_output_prefix)accuracy
cdhitest_time=$(cdhitest_output_prefix)time

starcode?=$(benchmark_aux_path)/other_tools/starcode/starcode
starcode_dist?=4
starcode_ratio?=5
starcode_params=dist_$(starcode_dist).ratio_$(starcode_ratio).
starcode_output_prefix=$(input_reads_prefix)starcode.$(starcode_params)
starcode_output=$(starcode_output_prefix)out
starcode_cluster=$(starcode_output_prefix)cluster
starcode_accuracy=$(starcode_output_prefix)accuracy
starcode_time=$(starcode_output_prefix)time

rainbow?=$(benchmark_aux_path)/other_tools/rainbow/rainbow
rainbow_div?=false
rainbow_mismatch?=4
rainbow_params=mismatch_$(rainbow_mismatch).div_$(rainbow_div).
rainbow_output_prefix=$(input_reads_prefix)rainbow.$(rainbow_params)
rainbow_output=$(rainbow_output_prefix)out
rainbow_cluster=$(rainbow_output_prefix)cluster
rainbow_accuracy=$(rainbow_output_prefix)accuracy
rainbow_time=$(rainbow_output_prefix)time

# dunovo_prefix is the directory where dunovo is cloned
dunovo_prefix?=$(benchmark_aux_path)/other_tools/dunovo
DUNOVO_RUN=$(benchmark_aux_path)/run_dunovo.sh
dunovo_temp_directory?=$(my_current_dir)temp
dunovo_dist?=2
dunovo_barcode_length?=$(barcode_length)
dunovo_invariant?=0
dunovo_params=dist_$(dunovo_dist).
dunovo_output_prefix=$(input_reads_prefix)dunovo.$(dunovo_params)
dunovo_output=$(dunovo_output_prefix)out
dunovo_cluster=$(dunovo_output_prefix)cluster
dunovo_accuracy=$(dunovo_output_prefix)accuracy
dunovo_time=$(dunovo_output_prefix)time

calib_output_prefix=$(input_reads_prefix)calib.$(clustering_params)
calib_accuracy=$(calib_output_prefix)accuracy
calib_time=$(calib_output_prefix)time

calib_log_file?=$(input_reads_prefix)calib_benchmarks.tsv
cdhitest_log_file?=$(input_reads_prefix)cdhitest_benchmarks.tsv
starcode_log_file?=$(input_reads_prefix)starcode_benchmarks.tsv
dunovo_log_file?=$(input_reads_prefix)dunovo_benchmarks.tsv
rainbow_log_file?=$(input_reads_prefix)rainbow_benchmarks.tsv

run: calib_log starcode_log rainbow_log cdhitest_log

make_log_files: make_calib_log_file make_cdhitest_log_file make_starcode_log_file make_dunovo_log_file make_rainbow_log_file
make_calib_log_file: $(calib_log_file)
make_cdhitest_log_file: $(cdhitest_log_file)
make_starcode_log_file: $(starcode_log_file)
make_dunovo_log_file: $(dunovo_log_file)
make_rainbow_log_file: $(rainbow_log_file)

calib_log: $(calib_log_file) $(calib_accuracy)
	$(eval my_time := $(shell $(AWK) $(GET_TIME) $(calib_time)))
	$(eval my_mem := $(shell $(AWK) $(GET_MEM) $(calib_time)))
	$(eval my_accuracy := $(shell $(AWK) $(GET_ACCURACY) $(calib_accuracy)))
	$(eval my_timestamp := $(shell /bin/date "+%Y-%m-%d---%H-%M-%S"))
	$(ECHO) "$(my_timestamp)\t$(my_time)\t$(my_mem)\t$(my_accuracy)\t$(barcode_length)\t$(minimizers_num)\t$(kmer_size)\t$(barcode_error_tolerance)\t$(minimizers_threshold)" >> $(calib_log_file);
	rm -f $(calib_accuracy) $(calib_time) $(cluster_file) $(cluster_file).log $(cluster_file).node.log;

$(calib_log_file):
	$(ECHO) "my_timestamp\ttime\tmem\tARI\tbarcode_length\tminimizers_num\tkmer_size\tbarcode_error_tolerance\tminimizers_threshold" > $(calib_log_file)

$(calib_accuracy): $(calib_time)
	$(python3) $(simulating_path)rand_index.py \
		--input-cluster-file $(cluster_file) \
		--input-amplified-molecule $(input_amplified_molecules) \
		--output-accuracy-results $(calib_accuracy)

$(calib_time): $(GNU_TIME) calib simulate
	$(GNU_TIME) -v -o $(calib_time) \
	./calib \
		--input-forward $(forward_reads) \
		--input-reverse $(reverse_reads) \
		--output-prefix $(output_prefix) \
		--barcode-length $(barcode_length) \
		--minimizer-count $(minimizers_num) \
		--kmer-size $(kmer_size) \
		--error-tolerance $(barcode_error_tolerance) \
		--minimizer-threshold $(minimizers_threshold) \
		$(silent)

# CD-HIT-EST
cdhitest_log: $(cdhitest_log_file) $(cdhitest_accuracy)
	$(eval my_time := $(shell $(AWK) $(GET_TIME) $(cdhitest_time)))
	$(eval my_mem := $(shell $(AWK) $(GET_MEM) $(cdhitest_time)))
	$(eval my_accuracy := $(shell $(AWK) $(GET_ACCURACY) $(cdhitest_accuracy)))
	$(eval my_timestamp := $(shell /bin/date "+%Y-%m-%d---%H-%M-%S"))
	$(ECHO) "$(my_timestamp)\t$(my_time)\t$(my_mem)\t$(my_accuracy)\t$(cdhitest_dist)" >> $(cdhitest_log_file);
	rm -f $(cdhitest_accuracy) $(cdhitest_time) $(cdhitest_cluster) $(cdhitest_output).1.fastq.clstr $(cdhitest_output).1.fastq $(cdhitest_output).2.fastq;

$(cdhitest_log_file):
	$(ECHO) "my_timestamp\ttime\tmem\tARI\tcdhitest_dist" > $(cdhitest_log_file)

$(cdhitest_accuracy): $(cdhitest_time)
	$(CONVERT_CDHITEST) $(cdhitest_output).1.fastq.clstr > $(cdhitest_cluster);
	$(python3) $(simulating_path)rand_index.py \
		--input-cluster-file $(cdhitest_cluster) \
		--input-amplified-molecule $(input_amplified_molecules) \
		--output-accuracy-results $(cdhitest_accuracy)

$(cdhitest_time): $(GNU_TIME) cdhitest simulate
	$(GNU_TIME) -v -o $(cdhitest_time) \
		$(cdhitest) \
			-P 1 \
			-i $(forward_reads) \
			-j $(reverse_reads) \
			-o $(cdhitest_output).1.fastq \
			-op $(cdhitest_output).2.fastq \
			-c $(cdhitest_dist) \
			-d 0 \
			-M 0

cdhitest:
	make -C $(benchmark_aux_path)/other_tools/cdhit

# Starcode
starcode_log: $(starcode_log_file) $(starcode_accuracy)
	$(eval my_time := $(shell $(AWK) $(GET_TIME) $(starcode_time)))
	$(eval my_mem := $(shell $(AWK) $(GET_MEM) $(starcode_time)))
	$(eval my_accuracy := $(shell $(AWK) $(GET_ACCURACY) $(starcode_accuracy)))
	$(eval my_timestamp := $(shell /bin/date "+%Y-%m-%d---%H-%M-%S"))
	$(ECHO) "$(my_timestamp)\t$(my_time)\t$(my_mem)\t$(my_accuracy)\t$(starcode_dist)\t$(starcode_ratio)" >> $(starcode_log_file);
	rm -f $(starcode_accuracy) $(starcode_time) $(starcode_cluster) $(starcode_output);

$(starcode_log_file):
	$(ECHO) "my_timestamp\ttime\tmem\tARI\tstarcode_dist\tstarcode_ratio" > $(starcode_log_file)

$(starcode_accuracy): $(starcode_time)
	$(CONVERT_STARCODE) $(starcode_output) > $(starcode_cluster);
	$(python3) $(simulating_path)rand_index.py \
		--input-cluster-file $(starcode_cluster) \
		--input-amplified-molecule $(input_amplified_molecules) \
		--output-accuracy-results $(starcode_accuracy)

$(starcode_time): $(GNU_TIME) starcode simulate
	$(GNU_TIME) -v -o $(starcode_time) \
		$(starcode) \
			-1 $(forward_reads) \
			-2 $(reverse_reads) \
			-d $(starcode_dist) \
			-r $(starcode_ratio) \
			--print-clusters \
			--seq-id \
			> $(starcode_output)

starcode:
	make -C $(benchmark_aux_path)/other_tools/starcode

# Du Novo
dunovo_log: $(dunovo_log_file) $(dunovo_accuracy)
	$(eval my_time := $(shell $(AWK) $(GET_TIME) $(dunovo_time)))
	$(eval my_mem := $(shell $(AWK) $(GET_MEM) $(dunovo_time)))
	$(eval my_accuracy := $(shell $(AWK) $(GET_ACCURACY) $(dunovo_accuracy)))
	$(eval my_timestamp := $(shell /bin/date "+%Y-%m-%d---%H-%M-%S"))
	$(ECHO) "$(my_timestamp)\t$(my_time)\t$(my_mem)\t$(my_accuracy)\t$(dunovo_dist)" >> $(dunovo_log_file);
	rm -f $(dunovo_accuracy) $(dunovo_time) $(dunovo_cluster) $(dunovo_output);

$(dunovo_log_file):
	$(ECHO) "my_timestamp\ttime\tmem\tARI\tdunovo_dist" > $(dunovo_log_file)

$(dunovo_accuracy): $(dunovo_time)
	$(CONVERT_DUNOVO) $(dunovo_output) > $(dunovo_cluster);
	$(python3) $(simulating_path)rand_index.py \
		--input-cluster-file $(dunovo_cluster) \
		--input-amplified-molecule $(input_amplified_molecules) \
		--output-accuracy-results $(dunovo_accuracy)

$(dunovo_time): $(GNU_TIME) dunovo simulate
	$(eval rand := $(shell $(RAW_AWK) 'BEGIN{srand();printf("%d", 65536*rand())}'))
	conda create --name calib_dunovo$(rand) -c faircloth-lab -c bioconda samtools python=2.7 networkx bowtie -y;
	$(GNU_TIME) -v -o $(dunovo_time) \
		$(DUNOVO_RUN) \
			$(dunovo_temp_directory) \
			$(forward_reads) \
			$(reverse_reads) \
			$(dunovo_prefix) \
			$(dunovo_invariant) \
			$(barcode_length) \
			$(dunovo_dist) \
			$(dunovo_output) \
			calib_dunovo$(rand)
	conda remove --name calib_dunovo"$(rand)"  --all -y

dunovo:
	make -C $(benchmark_aux_path)/other_tools/dunovo

# Rainbow
rainbow_log: $(rainbow_log_file) $(rainbow_accuracy)
	$(eval my_time := $(shell $(AWK) $(GET_TIME) $(rainbow_time)))
	$(eval my_mem := $(shell $(AWK) $(GET_MEM) $(rainbow_time)))
	$(eval my_accuracy := $(shell $(AWK) $(GET_ACCURACY) $(rainbow_accuracy)))
	$(eval my_timestamp := $(shell /bin/date "+%Y-%m-%d---%H-%M-%S"))
	$(ECHO) "$(my_timestamp)\t$(my_time)\t$(my_mem)\t$(my_accuracy)\t$(rainbow_mismatch)\t$(rainbow_div)" >> $(rainbow_log_file);
	rm -f $(rainbow_accuracy) $(rainbow_time) $(rainbow_cluster) $(rainbow_output);

$(rainbow_log_file):
	$(ECHO) "my_timestamp\ttime\tmem\tARI\trainbow_mismatch\trainbow_div" > $(rainbow_log_file)

$(rainbow_accuracy): $(rainbow_time)
	$(CONVERT_RAINBOW) $(rainbow_output) > $(rainbow_cluster);
	$(python3) $(simulating_path)rand_index.py \
		--input-cluster-file $(rainbow_cluster) \
		--input-amplified-molecule $(input_amplified_molecules) \
		--output-accuracy-results $(rainbow_accuracy)


$(rainbow_time): $(GNU_TIME) rainbow simulate
ifeq ($(rainbow_div),false)
	$(GNU_TIME) -v -o $(rainbow_time) \
		$(rainbow) cluster \
			-1 $(forward_reads) \
			-2 $(reverse_reads) \
			-m $(rainbow_mismatch) \
			> $(rainbow_output)
else
	$(GNU_TIME) -v -o $(rainbow_time) \
		$(rainbow) cluster \
			-1 $(forward_reads) \
			-2 $(reverse_reads) \
			-m $(rainbow_mismatch) \
			| $(rainbow) div \
			> $(rainbow_output)
endif

rainbow:
	make -C $(benchmark_aux_path)/other_tools/rainbow

$(GNU_TIME):
	wget https://ftp.gnu.org/gnu/time/time-1.9.tar.gz \
		-O $(benchmark_aux_path)/other_tools/time-1.9.tar.gz;
	tar -xzf $(benchmark_aux_path)/other_tools/time-1.9.tar.gz \
		-C $(benchmark_aux_path)/other_tools/;
	rm -f $(benchmark_aux_path)/other_tools/time-1.9.tar.gz;
	cd $(benchmark_aux_path)/other_tools/time-1.9; \
		./configure; \
		cd - ;
	make -C $(benchmark_aux_path)/other_tools/time-1.9;
